---

#- include: root-password-expired.yml

## official packages are handling one or two db
- name: apt | uninstall maxmind package to avoid conflicts
  apt:
    name:
      - geoip-database
      - geoip-database-extra
    state: absent
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  register: pkg_result
  until: pkg_result is success

- name: yum | uninstall maxmind package to avoid conflicts
  yum:
    name:
      - GeoIP-GeoLite-data
      - geoipupdate
      - GeoIP-update
    state: absent
  when: ansible_os_family == "RedHat"
  register: pkg_result
  until: pkg_result is success

## hash are not really useful as files are updated regulary but if needed.
- name: Maxmind directory
  file: "path={{ maxmind_rootdir }} mode=0755 owner=root state=directory"
- name: Maxmind download directory
  file: "path={{ maxmind_rootdir }}/download mode=0755 owner=root state=directory"

## Downloads to dedicated directory to allow get_url to remain idempotent
- name: Get Maxmind databases
  get_url:
    url: "{{ item }}"
    dest: "{{ maxmind_rootdir }}/download/{{ item | basename }}"
    mode: '0444'
  with_items:
    - http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz
    - http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.mmdb.gz

- name: extract db
  shell: "gunzip -c {{ maxmind_rootdir }}/download/{{ item }}.gz > {{ maxmind_rootdir }}/{{ item }}"
  args:
    creates: "{{ maxmind_rootdir }}/{{ item }}"
## unarchive only supports archives (tar/tgz/zip), not compressed data files
#  unarchive:
#    src: "{{ maxmind_rootdir }}/download/{{ item }}.gz"
#    dest: "{{ maxmind_rootdir }}"
#    remote_src: true
  with_items:
    - GeoLite2-City.mmdb
    - GeoLite2-Country.mmdb

- name: symlink GeoIP dir to /usr/share/GeoIP
  file: "src={{ maxmind_rootdir }} dest=/usr/share/GeoIP state=link"
- name: symlink GeoIP dir to /usr/local/share/GeoIP
  file: "src=/usr/share/GeoIP dest=/usr/local/share/GeoIP state=link"

- name: Add script to update maxmind
  template: src=update-maxmind.sh.j2 dest=/usr/local/bin/update-maxmind.sh mode=0755
- name: apt | ensure cron is installed
  apt: name=cron state=present
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  register: pkg_result
  until: pkg_result is success
- name: yum | ensure cron is installed
  yum: name=crontabs state=present
  when: ansible_os_family == "RedHat"
  register: pkg_result
  until: pkg_result is success

- name: cron task to update daily
  cron: name="maxmind autoupdate" minute=0 hour=0
        user=root job="/usr/local/bin/update-maxmind.sh > /tmp/update_maxmind.log 2>&1"
        cron_file=ansible_maxmind-update

- block:
    - name: Debian | Ensure Aide config dir exists
      file: dest=/etc/aide/aide.conf.d state=directory mode=0755
    - name: add additional aide HIDS configuration
      template: src=99_aide_local_maxmind.j2 dest=/etc/aide/aide.conf.d/99_aide_local_maxmind mode=0644
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
